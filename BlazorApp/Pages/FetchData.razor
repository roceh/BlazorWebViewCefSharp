@page "/fetchdata"
@using System.IO
@using System.Text.Json

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var forecastsJson = @"
[
  {
    ""date"": ""2018-05-06"",
    ""temperatureC"": 1,
    ""summary"": ""Freezing"",
    ""temperatureF"": 33
  },
  {
    ""date"": ""2018-05-07"",
    ""temperatureC"": 14,
    ""summary"": ""Bracing"",
    ""temperatureF"": 57
  },
  {
    ""date"": ""2018-05-08"",
    ""temperatureC"": -13,
    ""summary"": ""Freezing"",
    ""temperatureF"": 9
  },
  {
    ""date"": ""2018-05-09"",
    ""temperatureC"": -16,
    ""summary"": ""Balmy"",
    ""temperatureF"": 4
  },
  {
    ""date"": ""2018-05-10"",
    ""temperatureC"": -2,
    ""summary"": ""Chilly"",
    ""temperatureF"": 29
  }
]
";
        forecasts = JsonSerializer.Deserialize<WeatherForecast[]>(forecastsJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        await base.OnInitializedAsync();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
